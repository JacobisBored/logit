>>> import string
>>> string.punctuation
'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
>>> s = 'HeLLo'
>>> s
'HeLLo'
>>> s.lower()
'hello'
>>> string.lower(s)
'hello'
>>> _
'hello'
>>> ''.lower()
''
>>> lower = lambda x:x.lower()
>>> lower(s)
'hello'
>>> help(string.translate)

>>> 
>>> s = 'HeLLo'
>>> s.translate(None, 'LLo')
'He'
>>> s.translate(None, 'Lo')
'He'
>>> s    
'HeLLo'
>>> help(type(s))

>>> dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> help(s.translate)

>>> friends = {'julius': '100 via apian', 'cleopatra': '000 pyramid parkway'}
>>> romans = dict(brutus='234 via tratorium', cassius='111 aqueduct lane')
>>> countrymen = dict([('plebius','786 via bunius'), ('plebia', '786 via bunius')])
>>> 
>>> everyone = {}
>>> [everyone.update(d) for d in (friends, romans, countrymen)]
[None, None, None]
>>> everyone
{'plebius': '786 via bunius', 'julius': '100 via apian', 'plebia': '786 via bunius', 'cleopatra': '000 pyramid parkway', 'cassius': '111 aqueduct lane', 'brutus': '234 via tratorium'}
>>> everyone = {}
>>> everyone.clear()
>>> 
>>> x = range(5)
>>> [i**2 for i in x]
[0, 1, 4, 9, 16]
>>> (i**2 for i in x)
<generator object <genexpr> at 0x1095af0f0>
>>> set(i**2 for i in x)
set([0, 1, 4, 16, 9])
>>> tuple(i**2 for i in x)
(0, 1, 4, 9, 16)
>>> sum(i**2 for i in x)
30
>>> dict((i,i**2) for i in x)
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
>>> 
>>> warehouse_log = """ lightcycle       10
...                         hoverboard        5
...                         lightsaber       12
...                         lightcycle       -3
...                         lightcycle       20
...                         phaser           40
...                         hoverboard       -4
...                         lightsaber       -8
...                     """
>>> 
>>> warehouse_log.strip().split('\n')
['lightcycle       10', '                        hoverboard        5', '                        lightsaber       12', '                        lightcycle       -3', '                        lightcycle       20', '                        phaser           40', '                        hoverboard       -4', '                        lightsaber       -8']
>>> [line.strip() for line in warehouse_log.strip().split('\n')]
['lightcycle       10', 'hoverboard        5', 'lightsaber       12', 'lightcycle       -3', 'lightcycle       20', 'phaser           40', 'hoverboard       -4', 'lightsaber       -8']
>>> [line.strip().split() for line in warehouse_log.strip().split('\n')]
[['lightcycle', '10'], ['hoverboard', '5'], ['lightsaber', '12'], ['lightcycle', '-3'], ['lightcycle', '20'], ['phaser', '40'], ['hoverboard', '-4'], ['lightsaber', '-8']]
>>> dict([line.strip().split() for line in warehouse_log.strip().split('\n')])
{'hoverboard': '-4', 'phaser': '40', 'lightcycle': '20', 'lightsaber': '-8'}
>>> 
>>> import numpy as np
>>> np
<module 'numpy' from '/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/__init__.pyc'>
>>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2016, 6, 15, 11, 2, 19, 602433)
>>> datetime.datetime.now()
datetime.datetime(2016, 6, 15, 11, 2, 27, 514422)
>>> print datetime.datetime.now()
2016-06-15 11:02:33.786541
>>> print datetime.datetime.now()
2016-06-15 11:02:35.682681
>>> print datetime.datetime.now()
2016-06-15 11:02:40.741781
>>> datetime.datetime.now().day 
15
>>> datetime.datetime.now().second 
8
>>> 

# baz.py
print "goodbye"

# foo.py
def bar(x):
  """ add 1 to x"""
  return x + 1

if __name__ == '__main__':
    print "Hello World"
    import baz
    print bar(2)


>>> x = np.array([0,1,2,3,4,5])
>>> x
array([0, 1, 2, 3, 4, 5])
>>> x + 1
array([1, 2, 3, 4, 5, 6])
>>> 2*x + 3
array([ 3,  5,  7,  9, 11, 13])
>>> 2*x**2
array([ 0,  2,  8, 18, 32, 50])
>>> dx = x[1:] - x[:1]
>>> dx
array([1, 2, 3, 4, 5])
>>> "dx = x_[i+1] - x_[i]"
'dx = x_[i+1] - x_[i]'
>>> 
>>> x
array([0, 1, 2, 3, 4, 5])
>>> np.sin(x)
array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ,
       -0.95892427])
>>> x
array([0, 1, 2, 3, 4, 5])
>>> x.shape   
(6,)
>>> x.ndim
1
>>> x.size
6
>>> x.shape = (2,3)
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> x.T
array([[0, 3],
       [1, 4],
       [2, 5]])
>>> x.shape = (1,6)
>>> x
array([[0, 1, 2, 3, 4, 5]])
>>> x.T
array([[0],
       [1],
       [2],
       [3],
       [4],
       [5]])
>>> x.shape
(1, 6)
>>> x.shape = (6,)
>>> x 
array([0, 1, 2, 3, 4, 5])
>>> x.T
array([0, 1, 2, 3, 4, 5])
>>> x[0]
0
>>> type(x[0])
<type 'numpy.int64'>
>>> np.array(0)
array(0)
>>> np.array(0).shape
()
>>> q = np.array(0)
>>> q
array(0)
>>> np.atleast_2d(q)
array([[0]])
>>> np.atleast_2d(x)
array([[0, 1, 2, 3, 4, 5]])
>>> 
>>> 
>>> x
array([0, 1, 2, 3, 4, 5])
>>> x.shape = (2,3)
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> x.reshape((3,2))
array([[0, 1],
       [2, 3],
       [4, 5]])
>>> x.T
array([[0, 3],
       [1, 4],
       [2, 5]])
>>> x.T.reshape((6,))
array([0, 3, 1, 4, 2, 5])
>>> 
>>> x.shape = (2,3)
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> x.strides
(24, 8)
>>> np.array([0,1,2,3])
array([0, 1, 2, 3])
>>> y = np.array([0,1,2,3])
>>> type(y)
<type 'numpy.ndarray'>
>>> np.dtype(y)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: data type not understood
>>> y.dtype    
dtype('int64')
>>> y = np.array([0,1,2,3.0])
>>> type(y)
<type 'numpy.ndarray'>
>>> y.dtype
dtype('float64')
>>> y
array([ 0.,  1.,  2.,  3.])
>>> y = np.array(['0',1,2,3])
>>> type(y)
<type 'numpy.ndarray'>
>>> y.dtype
dtype('S1')
>>> y
array(['0', '1', '2', '3'], 
      dtype='|S1')
>>> y = np.array(['0',1,2,3.0])
>>> y.dtype
dtype('S3')
>>> y
array(['0', '1', '2', '3.0'], 
      dtype='|S3')
>>> y = np.array(['0',1,min,3.0])
>>> y.dtype
dtype('O')
>>> y
array(['0', 1, <built-in function min>, 3.0], dtype=object)
>>> y[:2]
array(['0', 1], dtype=object)
>>> z = y[:2]
>>> z
array(['0', 1], dtype=object)
>>> z[0] = 0
>>> z
array([0, 1], dtype=object)
>>> np.array([0,1,2])
array([0, 1, 2])
>>> y
array([0, 1, <built-in function min>, 3.0], dtype=object)
>>> z = y[::2]
>>> z
array([0, <built-in function min>], dtype=object)
>>> z[-1] = 2
>>> y
array([0, 1, 2, 3.0], dtype=object)
>>> q
array(0)
>>> z
array([0, 2], dtype=object)
>>> q = np.array([0,1,2,3,4,5])
>>> q
array([0, 1, 2, 3, 4, 5])
>>> q[0] = 1.0123141
>>> q
array([1, 1, 2, 3, 4, 5])
>>> q[0] = 1.9123141
>>> q
array([1, 1, 2, 3, 4, 5])
>>> q[0] = '3'      
>>> q
array([3, 1, 2, 3, 4, 5])
>>> q[0] = min
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: long() argument must be a string or a number, not 'builtin_function_or_method'
>>> q.fill(5)
>>> q
array([5, 5, 5, 5, 5, 5])
>>> q.fill('4')
>>> q
array([4, 4, 4, 4, 4, 4])
>>> q.fill('h')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for long() with base 10: 'h'
>>> q.fill(3.4)
>>> q
array([3, 3, 3, 3, 3, 3])
>>> q = np.array([0,1,2,3,4,5], dtype=float)
>>> q
array([ 0.,  1.,  2.,  3.,  4.,  5.])
>>> q = np.array([0,1,2,3,4,5], dtype=str)
>>> q
array(['0', '1', '2', '3', '4', '5'], 
      dtype='|S1')
>>> 
>>> 
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> x.T.ravel()
array([0, 3, 1, 4, 2, 5])
>>> 
>>> y = x.T
>>> y[0] = 100
>>> x
array([[100,   1,   2],
       [100,   4,   5]])
>>> y = x.ravel()
>>> y
array([100,   1,   2, 100,   4,   5])
>>> y[::3] = [0,3]
>>> y
array([0, 1, 2, 3, 4, 5])
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> x[0]
array([0, 1, 2])
>>> x[:,0]
array([0, 3])
>>> x[:,0] = [200,200]
>>> x
array([[200,   1,   2],
       [200,   4,   5]])
>>> x[:,0] = 100      
>>> x
array([[100,   1,   2],
       [100,   4,   5]])
>>> x[:,0] = [0,3]
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> y = x.T
>>> y[0]
array([0, 3])
>>> y
array([[0, 3],
       [1, 4],
       [2, 5]])
>>> y[0] = 100
>>> y
array([[100, 100],
       [  1,   4],
       [  2,   5]])
>>> x
array([[100,   1,   2],
       [100,   4,   5]])
>>> y = x.ravel()
>>> y
array([100,   1,   2, 100,   4,   5])
>>> y.shape
(6,)
>>> y[::3] = [0,3]
>>> y
array([0, 1, 2, 3, 4, 5])
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> x[0]
array([0, 1, 2])
>>> x[:,0]
array([0, 3])
>>> x[0,:]
array([0, 1, 2])
>>> x[:,0]
array([0, 3])
>>> 
>>> 
>>> x[::2,0]
array([0])
>>> x[1:,1:]
array([[4, 5]])
>>> x.copy()
array([[0, 1, 2],
       [3, 4, 5]])
>>> 
>>> y = x.T.ravel()
>>> y
array([0, 3, 1, 4, 2, 5])
>>> x 
array([[0, 1, 2],
       [3, 4, 5]])
>>> y[0] = 100
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> 

>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> plt.plot(x)
[<matplotlib.lines.Line2D object at 0x10de92f10>, <matplotlib.lines.Line2D object at 0x10dea2150>, <matplotlib.lines.Line2D object at 0x10dea2290>]
>>> plt.show()
>>> x
array([[0, 1, 2],
       [3, 4, 5]])
>>> plt.plot(x.ravel())
[<matplotlib.lines.Line2D object at 0x10c5d3f10>]
>>> plt.show()
>>> plt.ion() 
>>> plt.plot(x.ravel())
[<matplotlib.lines.Line2D object at 0x10c595fd0>]
>>> plt.plot(x.ravel() + 1)
[<matplotlib.lines.Line2D object at 0x10ff863d0>]
>>> plt.plot(x.ravel() - 1)
[<matplotlib.lines.Line2D object at 0x10e80b450>]
>>> plt.ioff()
>>> 
>>> 
>>> np.arange(10)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> np.arange(1,10,2)
array([1, 3, 5, 7, 9])
>>> np.arange(1,10,2.5)
array([ 1. ,  3.5,  6. ,  8.5])
>>> np.arange(1.,10,1)
array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
>>> np.arange(1,10,1.5)
array([ 1. ,  2.5,  4. ,  5.5,  7. ,  8.5])
>>> np.arange(1,10,.99999999)
array([ 1.        ,  1.99999999,  2.99999998,  3.99999997,  4.99999996,
        5.99999995,  6.99999994,  7.99999993,  8.99999992,  9.99999991])
>>> np.arange(1,10,.999999999999)
array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])
>>> np.arange(1,10,.999999999999)[-1] < 10.
True
>>> np.arange(1,10,.999999999999)[-1]      
9.9999999999909992
>>> np.arange(1,10,.9999999999999999999999)
array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
>>> 
>>> np.linspace(0,10,1)
array([ 0.])
>>> np.arange(0,10,1)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> np.arange(0,11,1)
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
>>> np.arange(0,11,1.3)
array([  0. ,   1.3,   2.6,   3.9,   5.2,   6.5,   7.8,   9.1,  10.4])
>>> np.linspace(0,10,4)
array([  0.        ,   3.33333333,   6.66666667,  10.        ])
>>> np.linspace(0,10,15)
array([  0.        ,   0.71428571,   1.42857143,   2.14285714,
         2.85714286,   3.57142857,   4.28571429,   5.        ,
         5.71428571,   6.42857143,   7.14285714,   7.85714286,
         8.57142857,   9.28571429,  10.        ])
>>> 
>>> plt.plot(np.sin(np.linspace(0,10,50)))
[<matplotlib.lines.Line2D object at 0x11061c890>]
>>> plt.show()
>>> x = np.linspace(0,10,50)  
>>> plt.plot(x, np.sin(x)
... )
[<matplotlib.lines.Line2D object at 0x110754090>]
>>> plt.show()
>>> x = np.linspace(0,10,100)
>>> plt.plot(x, np.sin(x))
[<matplotlib.lines.Line2D object at 0x110e014d0>]
>>> plt.show()
>>> x = np.linspace(0,10,5)
>>> plt.plot(x, np.sin(x))
[<matplotlib.lines.Line2D object at 0x110ece790>]
>>> plt.show()
>>> plt.figure()
<matplotlib.figure.Figure object at 0x110ef3050>
>>> 
>>> 
>>> plt.hist(np.random.randn(1000))
(array([   6.,   37.,   80.,  141.,  207.,  210.,  179.,   93.,   34.,   13.]), array([-2.94257055, -2.36460405, -1.78663755, -1.20867105, -0.63070455,
       -0.05273805,  0.52522845,  1.10319495,  1.68116145,  2.25912795,
        2.83709444]), <a list of 10 Patch objects>)
>>> plt.hist(np.random.rand(1000), aplha=.3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/pyplot.py", line 2958, in hist
    stacked=stacked, data=data, **kwargs)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/__init__.py", line 1812, in inner
    return func(ax, *args, **kwargs)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/axes/_axes.py", line 6223, in hist
    p.update(kwargs)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py", line 856, in update
    raise AttributeError('Unknown property %s' % k)
AttributeError: Unknown property aplha
>>> plt.hist(np.random.rand(1000), alpha=.3)
(array([ 103.,   99.,  102.,   95.,  106.,  108.,   99.,   93.,   89.,  106.]), array([  5.79466077e-05,   1.00027679e-01,   1.99997411e-01,
         2.99967144e-01,   3.99936876e-01,   4.99906609e-01,
         5.99876341e-01,   6.99846074e-01,   7.99815806e-01,
         8.99785539e-01,   9.99755271e-01]), <a list of 10 Patch objects>)
>>> plt.show()
>>> plt.hist(np.random.rand(1000), alpha=.3)
(array([  90.,  114.,   89.,   90.,  105.,  116.,  104.,   97.,  107.,   88.]), array([ 0.00109391,  0.10094903,  0.20080415,  0.30065927,  0.40051439,
        0.50036951,  0.60022463,  0.70007975,  0.79993486,  0.89978998,
        0.9996451 ]), <a list of 10 Patch objects>)
>>> plt.hist(np.random.randn(1000))
(array([   7.,   32.,   94.,  181.,  250.,  231.,  123.,   66.,   14.,    2.]), array([-3.12233462, -2.47781574, -1.83329687, -1.188778  , -0.54425912,
        0.10025975,  0.74477863,  1.3892975 ,  2.03381638,  2.67833525,
        3.32285412]), <a list of 10 Patch objects>)
>>> plt.show()
>>> plt.hist(np.random.rand(1000))
(array([ 137.,   97.,   94.,  101.,   93.,   95.,   90.,  102.,  103.,   88.]), array([  1.41842494e-04,   9.99116647e-02,   1.99681487e-01,
         2.99451309e-01,   3.99221131e-01,   4.98990954e-01,
         5.98760776e-01,   6.98530598e-01,   7.98300420e-01,
         8.98070243e-01,   9.97840065e-01]), <a list of 10 Patch objects>)
>>> plt.hist(np.random.randn(1000), alpha=0.3)
(array([   2.,    7.,   45.,  109.,  209.,  270.,  209.,  102.,   32.,   15.]), array([-3.68082662, -3.0130986 , -2.34537059, -1.67764258, -1.00991456,
       -0.34218655,  0.32554146,  0.99326948,  1.66099749,  2.3287255 ,
        2.99645352]), <a list of 10 Patch objects>)
>>> plt.show()
>>> 
>>> 
>>> np.mgrid[0:10:1, 0:20:2]
array([[[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
        [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
        [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
        [ 3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
        [ 4,  4,  4,  4,  4,  4,  4,  4,  4,  4],
        [ 5,  5,  5,  5,  5,  5,  5,  5,  5,  5],
        [ 6,  6,  6,  6,  6,  6,  6,  6,  6,  6],
        [ 7,  7,  7,  7,  7,  7,  7,  7,  7,  7],
        [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8],
        [ 9,  9,  9,  9,  9,  9,  9,  9,  9,  9]],

       [[ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
        [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18]]])
>>> np.mgrid[0:5:1, 0:10:2]
array([[[0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1],
        [2, 2, 2, 2, 2],
        [3, 3, 3, 3, 3],
        [4, 4, 4, 4, 4]],

       [[0, 2, 4, 6, 8],
        [0, 2, 4, 6, 8],
        [0, 2, 4, 6, 8],
        [0, 2, 4, 6, 8],
        [0, 2, 4, 6, 8]]])
>>> x,y = np.mgrid[0:5:1, 0:10:2]
>>> s
'HeLLo'
>>> x
array([[0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2],
       [3, 3, 3, 3, 3],
       [4, 4, 4, 4, 4]])
>>> y
array([[0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8]])
>>> x,y = np.ogrid[0:5:1, 0:10:2]
>>> x
array([[0],
       [1],
       [2],
       [3],
       [4]])
>>> y
array([[0, 2, 4, 6, 8]])
>>> x,y = np.mgrid[0:5:1, 0:10:2]
>>> x
array([[0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2],
       [3, 3, 3, 3, 3],
       [4, 4, 4, 4, 4]])
>>> y
array([[0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8]])
>>> x,y = np.mgrid[-5:5:1, -10:10:2]
>>> z = np.sqrt(x**2 + y**2)
>>> z
array([[ 11.18033989,   9.43398113,   7.81024968,   6.40312424,
          5.38516481,   5.        ,   5.38516481,   6.40312424,
          7.81024968,   9.43398113],
       [ 10.77032961,   8.94427191,   7.21110255,   5.65685425,
          4.47213595,   4.        ,   4.47213595,   5.65685425,
          7.21110255,   8.94427191],
       [ 10.44030651,   8.54400375,   6.70820393,   5.        ,
          3.60555128,   3.        ,   3.60555128,   5.        ,
          6.70820393,   8.54400375],
       [ 10.19803903,   8.24621125,   6.32455532,   4.47213595,
          2.82842712,   2.        ,   2.82842712,   4.47213595,
          6.32455532,   8.24621125],
       [ 10.04987562,   8.06225775,   6.08276253,   4.12310563,
          2.23606798,   1.        ,   2.23606798,   4.12310563,
          6.08276253,   8.06225775],
       [ 10.        ,   8.        ,   6.        ,   4.        ,
          2.        ,   0.        ,   2.        ,   4.        ,
          6.        ,   8.        ],
       [ 10.04987562,   8.06225775,   6.08276253,   4.12310563,
          2.23606798,   1.        ,   2.23606798,   4.12310563,
          6.08276253,   8.06225775],
       [ 10.19803903,   8.24621125,   6.32455532,   4.47213595,
          2.82842712,   2.        ,   2.82842712,   4.47213595,
          6.32455532,   8.24621125],
       [ 10.44030651,   8.54400375,   6.70820393,   5.        ,
          3.60555128,   3.        ,   3.60555128,   5.        ,
          6.70820393,   8.54400375],
       [ 10.77032961,   8.94427191,   7.21110255,   5.65685425,
          4.47213595,   4.        ,   4.47213595,   5.65685425,
          7.21110255,   8.94427191]])
>>> z[:3,:3]
array([[ 11.18033989,   9.43398113,   7.81024968],
       [ 10.77032961,   8.94427191,   7.21110255],
       [ 10.44030651,   8.54400375,   6.70820393]])
>>> z = np.sqrt(x**2 + y**2)
>>> x
array([[-5, -5, -5, -5, -5, -5, -5, -5, -5, -5],
       [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4],
       [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3],
       [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
       [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
       [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
       [ 3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
       [ 4,  4,  4,  4,  4,  4,  4,  4,  4,  4]])
>>> plt.imshow(z)
<matplotlib.image.AxesImage object at 0x11132c850>
>>> plt.show()
>>> 
>>> 
>>> np.mgrid[0:5:1]
array([0, 1, 2, 3, 4])
>>> np.mgrid[0:5:6j]
array([ 0.,  1.,  2.,  3.,  4.,  5.])
>>> x
array([[-5, -5, -5, -5, -5, -5, -5, -5, -5, -5],
       [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4],
       [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3],
       [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
       [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
       [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
       [ 3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
       [ 4,  4,  4,  4,  4,  4,  4,  4,  4,  4]])
>>> x = x[0]
>>> x
array([-5, -5, -5, -5, -5, -5, -5, -5, -5, -5])
>>> x = y[0]
>>> x
array([-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8])
>>> 
>>> y       
array([[-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8]])
>>> y[0] = 7
>>> y
array([[  7,   7,   7,   7,   7,   7,   7,   7,   7,   7],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8]])
>>> y[:,0] = 9
>>> y
array([[ 9,  7,  7,  7,  7,  7,  7,  7,  7,  7],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8],
       [ 9, -8, -6, -4, -2,  0,  2,  4,  6,  8]])
>>> y[::2,1::2] = -100
>>> y
array([[   9, -100,    7, -100,    7, -100,    7, -100,    7, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8]])
>>> y[::4,1::4] = [[1,2,3],[4,5,6]] 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: cannot copy sequence with size 2 to array axis with dimension 3
>>> y[::4,1::4].shape               
(3, 3)
>>> y[::4,1::4] = [[1,2,3],[4,5,6],[7,8,9]] 
>>> y
array([[   9,    1,    7, -100,    7,    2,    7, -100,    7,    3],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9,    4,   -6, -100,   -2,    5,    2, -100,    6,    6],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9,    7,   -6, -100,   -2,    8,    2, -100,    6,    9],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8]])
>>> 
>>> 
>>> 
>>> x = np.array([0,1,2,3,4,5]
... )
>>> 
>>> x
array([0, 1, 2, 3, 4, 5])
>>> np.where(x > 3)
(array([4, 5]),)
>>> x = x**2
>>> x
array([ 0,  1,  4,  9, 16, 25])
>>> 
>>> np.where(x > 2)
(array([2, 3, 4, 5]),)
>>> x[np.where(x > 2)]
array([ 4,  9, 16, 25])
>>> x[[2,3,4,5]]
array([ 4,  9, 16, 25])
>>> x[x > 2]
array([ 4,  9, 16, 25])
>>> x[x**2 > 2*x - 1]
array([ 0,  4,  9, 16, 25])
>>> np.newaxis
>>> np.newaxis is None
True
>>> 
>>> x
array([ 0,  1,  4,  9, 16, 25])
>>> x[np.newaxis, :]
array([[ 0,  1,  4,  9, 16, 25]])
>>> x[np.newaxis, np.newaxis, :]
array([[[ 0,  1,  4,  9, 16, 25]]])
>>> x[np.newaxis, np.newaxis, :].shape
(1, 1, 6)
>>> x[np.newaxis, np.newaxis, :, np.newaxis].shape
(1, 1, 6, 1)
>>> 

>>> y
array([[   9,    1,    7, -100,    7,    2,    7, -100,    7,    3],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9,    4,   -6, -100,   -2,    5,    2, -100,    6,    6],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9,    7,   -6, -100,   -2,    8,    2, -100,    6,    9],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8]])
>>> y[0] = 100
>>> y
array([[ 100,  100,  100,  100,  100,  100,  100,  100,  100,  100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9,    4,   -6, -100,   -2,    5,    2, -100,    6,    6],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9, -100,   -6, -100,   -2, -100,    2, -100,    6, -100],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8],
       [   9,    7,   -6, -100,   -2,    8,    2, -100,    6,    9],
       [   9,   -8,   -6,   -4,   -2,    0,    2,    4,    6,    8]])
>>> np.array([[1,2,3]])
array([[1, 2, 3]])
>>> np.array([[1,2,3]]) + np.array([[1],[2],[3],[4]])
array([[2, 3, 4],
       [3, 4, 5],
       [4, 5, 6],
       [5, 6, 7]])
>>> np.array([[1,2,3]]) + np.array([[1,2,3,4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: operands could not be broadcast together with shapes (1,3) (1,4) 
>>> 

>>> "%matplotlib inline"
'%matplotlib inline'
>>> 
